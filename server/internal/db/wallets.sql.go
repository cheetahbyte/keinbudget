// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: wallets.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (name, start_balance, user_id, icon) VALUES ($1, $2, $3, $4) RETURNING id, user_id, name, start_balance, icon
`

type CreateWalletParams struct {
	Name         string
	StartBalance string
	UserID       uuid.UUID
	Icon         sql.NullString
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet,
		arg.Name,
		arg.StartBalance,
		arg.UserID,
		arg.Icon,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.StartBalance,
		&i.Icon,
	)
	return i, err
}

const getWallet = `-- name: GetWallet :one
SELECT id, user_id, name, start_balance, icon FROM wallets WHERE user_id = $1 AND id = $2
`

type GetWalletParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) GetWallet(ctx context.Context, arg GetWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, arg.UserID, arg.ID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.StartBalance,
		&i.Icon,
	)
	return i, err
}

const getWallets = `-- name: GetWallets :many
SELECT id, user_id, name, start_balance, icon FROM wallets WHERE user_id = $1
`

func (q *Queries) GetWallets(ctx context.Context, userID uuid.UUID) ([]Wallet, error) {
	rows, err := q.db.QueryContext(ctx, getWallets, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.StartBalance,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
